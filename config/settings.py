"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
from decouple import config
import ssl
from django.core.mail.backends.smtp import EmailBackend
import dj_database_url

class CustomSMTPBackend(EmailBackend):
    def open(self):
        if self.connection:
            return False
        try:
            self.connection = self.connection_class(
                host=self.host, port=self.port, timeout=self.timeout
            )
            if self.use_tls:
                context = ssl.create_default_context()
                context.check_hostname = False
                context.verify_mode = ssl.CERT_NONE
                self.connection.starttls(context=context)
            if self.username and self.password:
                self.connection.login(self.username, self.password)
            return True
        except Exception:
            if not self.fail_silently:
                raise

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='django-insecure-change-me')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)

ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='localhost,127.0.0.1').split(',')

# –î–æ–±–∞–≤–ª—è–µ–º Render –¥–æ–º–µ–Ω—ã –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
if not DEBUG:
    ALLOWED_HOSTS.extend([
        '.onrender.com',  # –í—Å–µ –ø–æ–¥–¥–æ–º–µ–Ω—ã Render
        'insurance-platform-nackend.onrender.com',  # –í–∞—à –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–æ–º–µ–Ω
    ])

# Application definition
DJANGO_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

THIRD_PARTY_APPS = [
    'rest_framework',
    'corsheaders',
    'django_extensions',
]

LOCAL_APPS = [
    'apps.core',
    'apps.products',
    'apps.applications',
    'apps.accounts',
    'apps.notifications',
]

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'

# üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–°–ü–û–õ–¨–ó–£–ï–ú PostgreSQL –í –ü–†–û–î–ê–ö–®–ï–ù–ï
# Database configuration
if config('DATABASE_URL', default=None):
    # Render –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç DATABASE_URL
    DATABASES = {
        'default': dj_database_url.config(
            default=config('DATABASE_URL'),
            conn_max_age=600,
            conn_health_checks=True,
        )
    }
    print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è PostgreSQL –∏–∑ DATABASE_URL")
else:
    # –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ - –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å SQLite
    if DEBUG:
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': BASE_DIR / 'db.sqlite3',
            }
        }
        print("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SQLite (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)")
    else:
        # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û PostgreSQL
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.postgresql',
                'NAME': config('DB_NAME', default='insurance_platform'),
                'USER': config('DB_USER', default='postgres'),
                'PASSWORD': config('DB_PASSWORD', default=''),
                'HOST': config('DB_HOST', default='localhost'),
                'PORT': config('DB_PORT', default='5432'),
                'OPTIONS': {
                    'connect_timeout': 60,
                },
            }
        }
        print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è PostgreSQL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
LANGUAGE_CODE = 'ru-ru'
TIME_ZONE = 'Europe/Moscow'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_DIRS = [BASE_DIR / 'static']
# Static files –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è WhiteNoise
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# REST Framework
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
}

# CORS settings –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
CORS_ALLOW_ALL_ORIGINS = DEBUG  # –¢–æ–ª—å–∫–æ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ

if not DEBUG:
    # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ Vercel
    CORS_ALLOWED_ORIGINS = [
        'https://insurance-platform-frontend.vercel.app',  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –¥–æ–º–µ–Ω
        'https://localhost:3000',  # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    ]
else:
    # –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ —Ä–∞–∑—Ä–µ—à–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    CORS_ALLOWED_ORIGINS = [
        'http://localhost:3000',
        'http://127.0.0.1:3000',
        'http://192.168.56.1:3000',
    ]

CORS_ALLOWED_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# Email settings - –ò–°–ü–û–õ–¨–ó–£–ï–ú –ö–ê–°–¢–û–ú–ù–´–ô BACKEND
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'goshkoxxxx@gmail.com'
EMAIL_HOST_PASSWORD = 'yyuwhbnfejsfpscd'  # –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤!
DEFAULT_FROM_EMAIL = 'goshkoxxxx@gmail.com'
SERVER_EMAIL = config('SERVER_EMAIL', default='goshkoxxxx@gmail.com')
EMAIL_TIMEOUT = 30

# Notification settings (–≠–¢–û –î–û–õ–ñ–ù–û –ë–´–¢–¨ –í settings.py, –∞ –Ω–µ –≤ .env!)
ADMIN_EMAIL = config('ADMIN_EMAIL', default='goshkoxxx@inbox.ru')
NOTIFICATION_EMAIL = config('NOTIFICATION_EMAIL', default='goshkoxxx@inbox.ru')

# Admin lists
ADMINS = [
    ('Your Name', config('ADMIN_EMAIL', default='goshkoxxxx@gmail.com')),
]

MANAGERS = [
    ('Your Name', config('ADMIN_EMAIL', default='goshkoxxxx@gmail.com')),
]

# –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –º–æ–∂–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–Ω—Å–æ–ª—å:
if config('USE_CONSOLE_EMAIL', default=False, cast=bool):
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# Notification settings
ADMIN_EMAIL = config('ADMIN_EMAIL', default='goshkoxxx@inbox.ru')
SITE_NAME = config('SITE_NAME', default='–°—Ç—Ä–∞—Ö–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞')
SITE_URL = config('SITE_URL', default='http://localhost:3000')

# # Telegram settings
# TELEGRAM_BOT_TOKEN = config('TELEGRAM_BOT_TOKEN', default='')
# TELEGRAM_CHAT_ID = config('TELEGRAM_CHAT_ID', default='')

# Celery settings
CELERY_BROKER_URL = config('REDIS_URL', default='redis://localhost:6379/0')
CELERY_RESULT_BACKEND = config('REDIS_URL', default='redis://localhost:6379/0')
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE

# Logging - –ò–°–ü–†–ê–í–õ–ï–ù–û –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Unicode
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'logs' / 'django.log',
            'formatter': 'verbose',
            'encoding': 'utf-8',  # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Unicode
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
        'apps.applications': {
            'handlers': ['file', 'console'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'apps.notifications': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
os.makedirs(BASE_DIR / 'logs', exist_ok=True)

# –í –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞ settings.py –¥–æ–±–∞–≤—å—Ç–µ:
import ssl
ssl._create_default_https_context = ssl._create_unverified_context
